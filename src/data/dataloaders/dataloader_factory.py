from typing import Any, Tuple

import gin
import polars as pl

from .scikitlearn_dataloader import ScikitLearnDataloader
from .tensorflow_dataloader import TensorflowDataloader


@gin.configurable
class DataLoaderFactory:
	"""
	Factory class for creating data loaders for scikit-learn and TensorFlow models.

	This factory class provides a unified interface for creating different types
	of data loaders based on the specified configuration. It currently supports
	creating :class:`ScikitLearnDataloader` and :class:`TensorflowDataloader` instances.

	:param dataloader_name: The name of the data loader class to instantiate
		("TensorflowDataloader" or "ScikitLearnDataloader").
	:type dataloader_name: str
	:param \**kwargs: Additional keyword arguments to pass to the data loader constructor.

	"""

	def __init__(self, dataloader_name: str, **kwargs):
		"""
		Initializes the ``DataLoaderFactory`` and instantiates the specified data loader.

		:param dataloader_name: The name of the data loader class to instantiate.
		:type dataloader_name: str
		:param \**kwargs: Additional keyword arguments to pass to the data loader constructor.
		:raises AssertionError: If an invalid ``dataloader_name`` is provided.

		"""

		self._dataloader_classes = {
			"TensorflowDataloader": TensorflowDataloader,
			"ScikitLearnDataloader": ScikitLearnDataloader,
		}

		dataloader_class = self._dataloader_classes.get(dataloader_name)
		assert dataloader_class, f"Invalid dataloader name: {dataloader_name}"

		self.dataloader = dataloader_class(**kwargs)

	def load(self, data: pl.DataFrame):
		"""
		Loads the input DataFrame into the instantiated data loader.

		:param data: The DataFrame containing the data to be loaded.
		:type data: pl.DataFrame

		"""
		self.dataloader.load(data)

	def get_datasets(self) -> Tuple[Any, Any]:
		"""
		Retrieves the training and validation datasets from the data loader.

		:return: The datasets generated by the data loader. The specific format depends on the type of data loader used.
		:rtype: Union[Tuple[tf.data.Dataset, tf.data.Dataset], Tuple[List[Dict[str, npt.NDArray]],
			List[Dict[str, npt.NDArray]]]]

		"""
		return self.dataloader.get_dataset()
